<%# vim:set filetype=dts: %>

// █░█ █▀▀ █░░ █▀█ █▀▀ █▀█ █▀ 
// █▀█ ██▄ █▄▄ █▀▀ ██▄ █▀▄ ▄█ 


// Create a ZMK Behavior without having to specify the name three times
#define BEHAVIOR(NAME, ...) \
  / { \
      behaviors { \
        NAME: NAME { \
          __VA_ARGS__ \
        }; \
      }; \
    };

// Hold-Tap helper
#define HOLD_TAP(NAME, ...) \
  BEHAVIOR(NAME, \
    compatible = "zmk,behavior-hold-tap"; \
    #binding-cells = <2>; \
    __VA_ARGS__ \
  )

// Balanced Hold-Tap for thumb layer keys
#define BALANCED_HOLD_TAP(NAME, ...) \
  HOLD_TAP(NAME, \
    flavor = "balanced"; \
    __VA_ARGS__ \
  )

// Tap preferred Hold-Tap for home row mods
#define TAP_PREFERRED_HOLD_TAP(NAME, ...) \
  HOLD_TAP(NAME, \
    flavor = "tap-preferred"; \
__VA_ARGS__ \
  )

// Mod-Morph helper
#define MOD_MORPH(NAME, STANDARD, MORPHED, MODS, ...) \
  BEHAVIOR(NAME, \
    compatible = "zmk,behavior-mod-morph"; \
    #binding-cells = <0>; \
    bindings = <STANDARD>, <MORPHED>; \
    mods = <(MODS)>; \
    __VA_ARGS__ \
  )

// Combo helper
#define COMBO(NAME, TIMEOUT_MS, KEY_POSITIONS, LAYERS, BINDINGS) \
  NAME { \
    timeout-ms = <TIMEOUT_MS>; \
    key-positions = <KEY_POSITIONS>; \
    layers = <LAYERS>; \
    bindings = <BINDINGS>; \
  }; \


// Wrap ZMK_MACRO to avoid needing to specify Macro node
#define MACRO(NAME, ...) \
  / { \
      macros { \
        ZMK_MACRO(NAME, __VA_ARGS__) \
      }; \
    };

// Wrap ZMK_MACRO1 to avoid needing to specify Macro node
#define MACRO1(NAME, ...) \
  / { \
      macros { \
        ZMK_MACRO1(NAME, __VA_ARGS__) \
      }; \
    };

// Instant key press Macro helper using defined timers
#define FAST_MACRO(NAME, BINDINGS) \
  MACRO(NAME, \
    tap-ms = <FAST_MACRO_TAP_TIME>; \
    wait-ms = <FAST_MACRO_WAIT_TIME>; \
    bindings = <BINDINGS>; \
  )

// Instant key press one parameter Macro helper using defined timers
#define FAST_MACRO1(NAME, BINDINGS) \
  MACRO1(NAME, \
    tap-ms = <FAST_MACRO_TAP_TIME>; \
    wait-ms = <FAST_MACRO_WAIT_TIME>; \
    bindings = <BINDINGS>; \
  )
